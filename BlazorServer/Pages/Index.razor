@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>


<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

<button @onclick="Send" disabled="@(!IsConnected)">Send</button>


<hr />

<ul>
    @foreach(string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        // create connection to our hub.
        // connection is to the chathub
        hubConnection = new HubConnectionBuilder()
              .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
              .WithAutomaticReconnect()
              .Build();

        //client side (receiver of the message)
        //captures messags from the server (chathub class)
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formatedMessage = $"{user}: {message}";
            messages.Add(formatedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    // is state connected then yes it is connected otherwise it is false
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        //when page is closed dispose it
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}